{"title":"SpringBoot自动装配原理","uid":"931902b40e7b49ead6194ab4ea55b9d1","slug":"SpringBoot自动装配原理","date":"2025-04-12T08:59:02.000Z","updated":"2025-04-12T09:10:20.627Z","comments":true,"path":"api/articles/SpringBoot自动装配原理.json","keywords":null,"cover":"/img/KMP_cover.png","content":"<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>SpringBoot进一步简化了web应用开发步骤，其中一个很重要的核心概念就是自动装配，什么是自动装配？自动装配都做了些什么？</p>\n<h2 id=\"自动装配概述\"><a href=\"#自动装配概述\" class=\"headerlink\" title=\"自动装配概述\"></a>自动装配概述</h2><p>以往我们使用Servlet+Tomcat做web开发时，往往需要自己再xml配置文件中配置一大堆东西，而且往往项目越大，需要配置的东西就越多，这不仅非常繁琐，而且还拖慢了开发周期，自动装配的出现就是为了简化开发过程中的前期配置准备，让程序员更专注于业务的开发和实现。</p>\n<h2 id=\"自动装配核心理解\"><a href=\"#自动装配核心理解\" class=\"headerlink\" title=\"自动装配核心理解\"></a>自动装配核心理解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SpringBootApplication\"><a href=\"#SpringBootApplication\" class=\"headerlink\" title=\"@SpringBootApplication\"></a>@SpringBootApplication</h3><p>在SpringBoot的入口类中，存在这样一个注解，我们接下来就从它来剖析一下自动配置的原理。</p>\n<p>进入注解的源码中，我们发现其有两个重要的注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableAutoConfiguration</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SpringBootConfiguration\"><a href=\"#SpringBootConfiguration\" class=\"headerlink\" title=\"@SpringBootConfiguration\"></a>@SpringBootConfiguration</h3><p>进入源码发现它只是被定义为了一个Spring注解，所以我们对它的探究就到这。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@Indexed</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> SpringBootConfiguration &#123;</span><br><span class=\"line\">    <span class=\"meta\">@AliasFor(</span></span><br><span class=\"line\"><span class=\"meta\">        annotation = Configuration.class</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">proxyBeanMethods</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"EnableAutoConfiguration\"><a href=\"#EnableAutoConfiguration\" class=\"headerlink\" title=\"@EnableAutoConfiguration\"></a>@EnableAutoConfiguration</h3><p>观察注解名可以知道这应该是一个启用自动配置的注解</p>\n<p>进入它的源码，我们发现它有两个重要的注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoConfigurationPackage</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"AutoConfigurationPackage\"><a href=\"#AutoConfigurationPackage\" class=\"headerlink\" title=\"@AutoConfigurationPackage\"></a>@AutoConfigurationPackage</h4><p>从注解名我们可以先了解到，它是<strong>自动配置包</strong>注解。</p>\n<p>进入源码发现，它有一个重要注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Import(&#123;AutoConfigurationPackages.Registrar.class&#125;)</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Import-AutoConfigurationPackages-Registrar-class\"><a href=\"#Import-AutoConfigurationPackages-Registrar-class\" class=\"headerlink\" title=\"@Import({AutoConfigurationPackages.Registrar.class})\"></a>@Import({AutoConfigurationPackages.Registrar.class})</h5><p>查看源码可以发现，它其中的Registrar静态类是关键，通过<code>AutoConfigurationPackages.register(registry, (String[])(new PackageImports(metadata)).getPackageNames().toArray(new String[0]))</code>方法注册了某些东西，我们继续深入。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static class Registrar implements ImportBeanDefinitionRegistrar, DeterminableImports &#123;</span><br><span class=\"line\">    Registrar() &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) &#123;</span><br><span class=\"line\">        AutoConfigurationPackages.register(registry, (String[])(new PackageImports(metadata)).getPackageNames().toArray(new String[0]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Set&lt;Object&gt; determineImports(AnnotationMetadata metadata) &#123;</span><br><span class=\"line\">        return Collections.singleton(new PackageImports(metadata));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们找到了<code>PackageImports</code>的构造函数，发现它貌似是获得<code>AutoConfigurationPackage</code>注解下的包，然后将添加到了<code>packageNames</code>这个List数组中。最后再回到<code>registerBeanDefinitions</code>方法中将其注册为。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">AnnotationAttributes</span> <span class=\"variable\">attributes</span> <span class=\"operator\">=</span> AnnotationAttributes.fromMap(metadata.getAnnotationAttributes(AutoConfigurationPackage.class.getName(), <span class=\"literal\">false</span>));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PackageImports(AnnotationMetadata metadata) &#123;</span><br><span class=\"line\">    <span class=\"type\">AnnotationAttributes</span> <span class=\"variable\">attributes</span> <span class=\"operator\">=</span> AnnotationAttributes.fromMap(metadata.getAnnotationAttributes(AutoConfigurationPackage.class.getName(), <span class=\"literal\">false</span>));</span><br><span class=\"line\">    List&lt;String&gt; packageNames = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>(Arrays.asList(attributes.getStringArray(<span class=\"string\">&quot;basePackages&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Class&lt;?&gt; basePackageClass : attributes.getClassArray(<span class=\"string\">&quot;basePackageClasses&quot;</span>)) &#123;</span><br><span class=\"line\">        packageNames.add(basePackageClass.getPackage().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (packageNames.isEmpty()) &#123;</span><br><span class=\"line\">        packageNames.add(ClassUtils.getPackageName(metadata.getClassName()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.packageNames = Collections.unmodifiableList(packageNames);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Import-AutoConfigurationImportSelector-class\"><a href=\"#Import-AutoConfigurationImportSelector-class\" class=\"headerlink\" title=\"@Import({AutoConfigurationImportSelector.class})\"></a>@Import({AutoConfigurationImportSelector.class})</h4><p>它引入了<code>AutoConfigurationImportSelector</code>这个类，所以接下来我们要探究这个类是做什么的。</p>\n<p>看类名感觉应该是自动配置引用选择器，观察源码。</p>\n<p>找到<code>selectImports(AnnotationMetadata annotationMetadata)</code>方法的实现，我们观察方法实现，发现它通过<code>this.getAutoConfigurationEntry(annotationMetadata)</code>获得了一个自动配置实体，接下来我们来研究一下<code>getAutoConfigurationEntry(annotationMetadata)</code>这个方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> NO_IMPORTS;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">AutoConfigurationEntry</span> <span class=\"variable\">autoConfigurationEntry</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getAutoConfigurationEntry(annotationMetadata);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定位到方法实现，发现它使用了<code>this.getAttributes</code>方法来获得传入参数的属性，而<code>this.getAttributes</code>这个方法返回了<code>EnableAutoConfiguration</code>这个注解名，也就是说，只有使用了<code>@EnableAutoConfiguration</code>这个注解的类，才会启用自动配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> AutoConfigurationEntry <span class=\"title function_\">getAutoConfigurationEntry</span><span class=\"params\">(AnnotationMetadata annotationMetadata)</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> EMPTY_ENTRY;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">AnnotationAttributes</span> <span class=\"variable\">attributes</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getAttributes(annotationMetadata);</span><br><span class=\"line\">    List&lt;String&gt; configurations = <span class=\"built_in\">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class=\"line\">    configurations = <span class=\"built_in\">this</span>.&lt;String&gt;removeDuplicates(configurations);</span><br><span class=\"line\">    Set&lt;String&gt; exclusions = <span class=\"built_in\">this</span>.getExclusions(annotationMetadata, attributes);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.checkExcludedClasses(configurations, exclusions);</span><br><span class=\"line\">    configurations.removeAll(exclusions);</span><br><span class=\"line\">    configurations = <span class=\"built_in\">this</span>.getConfigurationClassFilter().filter(configurations);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AutoConfigurationEntry</span>(configurations, exclusions);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> AnnotationAttributes <span class=\"title function_\">getAttributes</span><span class=\"params\">(AnnotationMetadata metadata)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.getAnnotationClass().getName();</span><br><span class=\"line\">        <span class=\"type\">AnnotationAttributes</span> <span class=\"variable\">attributes</span> <span class=\"operator\">=</span> AnnotationAttributes.fromMap(metadata.getAnnotationAttributes(name, <span class=\"literal\">true</span>));</span><br><span class=\"line\">        Assert.notNull(attributes, () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">var10000</span> <span class=\"operator\">=</span> metadata.getClassName();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;No auto-configuration attributes found. Is &quot;</span> + var10000 + <span class=\"string\">&quot; annotated with &quot;</span> + ClassUtils.getShortName(name) + <span class=\"string\">&quot;?&quot;</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> attributes;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Class&lt;?&gt; getAnnotationClass() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EnableAutoConfiguration.class;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么到底要自动配置哪些类呢，在哪里可以找到SpringBoot能自动配置的类？我们继续往下看，<code>getCandidateConfigurations()</code>，我们进入这个方法的实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> List&lt;String&gt; <span class=\"title function_\">getCandidateConfigurations</span><span class=\"params\">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ImportCandidates</span> <span class=\"variable\">importCandidates</span> <span class=\"operator\">=</span> ImportCandidates.load(<span class=\"built_in\">this</span>.autoConfigurationAnnotation, <span class=\"built_in\">this</span>.getBeanClassLoader());</span><br><span class=\"line\">    List&lt;String&gt; configurations = importCandidates.getCandidates();</span><br><span class=\"line\">    Assert.notEmpty(configurations, <span class=\"string\">&quot;No auto configuration classes found in META-INF/spring/&quot;</span> + <span class=\"built_in\">this</span>.autoConfigurationAnnotation.getName() + <span class=\"string\">&quot;.imports. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> configurations;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>发现它的实现中使用了<code>ImportCandidates.load</code>这样一个方法，我们发现，它是从<code>META-INF/spring/%s.imports</code>这个文件下加载自动配置类的。</p>\n<p>:::info<br>这里需要注意，如果你学过SpringBoot2，就会发现这里有所不同，在SpringBoot2中，是从<code>/META_INF/spring.factories</code>这个文件下加载自动装配类的，而在SpringBoot3中抛弃了这种方法，SpringBoot3使用<code>ImportCandidates.load</code>方法从<code>META-INF/spring/%s.imports</code>加载自动配置类，但是<code>/META_INF/spring.factories</code>这个文件依然存在，只是其中不再包含需要自动配置的类，这样改变有许多好处，在这先不介绍。</p>\n<p>:::</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ImportCandidates <span class=\"title function_\">load</span><span class=\"params\">(Class&lt;?&gt; annotation, ClassLoader classLoader)</span> &#123;</span><br><span class=\"line\">        Assert.notNull(annotation, <span class=\"string\">&quot;&#x27;annotation&#x27; must not be null&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoaderToUse</span> <span class=\"operator\">=</span> decideClassloader(classLoader);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">location</span> <span class=\"operator\">=</span> String.format(<span class=\"string\">&quot;META-INF/spring/%s.imports&quot;</span>, annotation.getName());</span><br><span class=\"line\">        Enumeration&lt;URL&gt; urls = findUrlsInClasspath(classLoaderToUse, location);</span><br><span class=\"line\">        List&lt;String&gt; importCandidates = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(urls.hasMoreElements()) &#123;</span><br><span class=\"line\">            <span class=\"type\">URL</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> (URL)urls.nextElement();</span><br><span class=\"line\">            importCandidates.addAll(readCandidateConfigurations(url));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ImportCandidates</span>(importCandidates);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以打开这个文件看看</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveDataAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraReactiveRepositoriesAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveDataAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseReactiveRepositoriesAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.elasticsearch.ReactiveElasticsearchRepositoriesAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.jdbc.JdbcRepositoriesAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveDataAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoReactiveRepositoriesAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jReactiveDataAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jReactiveRepositoriesAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcDataAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.r2dbc.R2dbcRepositoriesAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisReactiveAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchClientAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchRestClientAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.elasticsearch.ReactiveElasticsearchClientAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.graphql.GraphQlAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.graphql.data.GraphQlReactiveQueryByExampleAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.graphql.data.GraphQlReactiveQuerydslAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.graphql.data.GraphQlQueryByExampleAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.graphql.data.GraphQlQuerydslAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.graphql.reactive.GraphQlWebFluxAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.graphql.rsocket.GraphQlRSocketAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.graphql.rsocket.RSocketGraphQlClientAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.graphql.security.GraphQlWebFluxSecurityAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.graphql.security.GraphQlWebMvcSecurityAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.graphql.servlet.GraphQlWebMvcAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.http.client.HttpClientAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.http.codec.CodecsAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JdbcClientAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mongo.MongoReactiveAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.neo4j.Neo4jAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.netty.NettyAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.pulsar.PulsarAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.pulsar.PulsarReactiveAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.quartz.QuartzAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.r2dbc.R2dbcAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.r2dbc.R2dbcProxyAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.r2dbc.R2dbcTransactionManagerAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.rsocket.RSocketMessagingAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.rsocket.RSocketRequesterAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.rsocket.RSocketServerAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.rsocket.RSocketStrategiesAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.reactive.ReactiveSecurityAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.reactive.ReactiveUserDetailsServiceAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.rsocket.RSocketSecurityAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.saml2.Saml2RelyingPartyAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.session.SessionAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.client.reactive.ReactiveOAuth2ClientAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.resource.reactive.ReactiveOAuth2ResourceServerAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.server.servlet.OAuth2AuthorizationServerAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.security.oauth2.server.servlet.OAuth2AuthorizationServerJwtAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.sql.init.SqlInitializationAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.ssl.SslAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.TransactionManagerCustomizationAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.ReactiveMultipartAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.WebSessionIdResolverAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.webservices.client.WebServiceTemplateAutoConfiguration</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们发现它们全都以<code>xxxAutoConfiguration</code>来表示。</p>\n<h3 id=\"思维导图表示\"><a href=\"#思维导图表示\" class=\"headerlink\" title=\"思维导图表示\"></a>思维导图表示</h3><p>接下来我用思维导图的方式展示一下具体的实现原理</p>\n<p><a href=\"https://imgse.com/i/pERcIOg\"><img src=\"https://s21.ax1x.com/2025/04/12/pERcIOg.png\" alt=\"pERcIOg.png\"></a></p>\n<h2 id=\"自动配置流程理解\"><a href=\"#自动配置流程理解\" class=\"headerlink\" title=\"自动配置流程理解\"></a>自动配置流程理解</h2><p>SpringBoot自动配置帮我们将所有存在于<code>META-INF/spring/%s.imports</code>的类都配置了，但是并不是我们全都会用上，那么SpringBoot是如何判断哪些是我们需要的，哪些不是呢？</p>\n<h3 id=\"Conditional-条件匹配\"><a href=\"#Conditional-条件匹配\" class=\"headerlink\" title=\"@Conditional 条件匹配\"></a><code>@Conditional</code> 条件匹配</h3><h4 id=\"（1）-ConditionalOnClass\"><a href=\"#（1）-ConditionalOnClass\" class=\"headerlink\" title=\"（1）@ConditionalOnClass\"></a><strong>（1）</strong><code>@ConditionalOnClass</code></h4><p>确保某个类存在才进行自动装配：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ConditionalOnClass(DataSource.class)</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class DataSourceAutoConfiguration &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只有当 <code>DataSource.class</code> 存在时，<code>DataSourceAutoConfiguration</code> 才会生效。</p>\n<h4 id=\"（2）-ConditionalOnMissingBean\"><a href=\"#（2）-ConditionalOnMissingBean\" class=\"headerlink\" title=\"（2）@ConditionalOnMissingBean\"></a><strong>（2）</strong><code>@ConditionalOnMissingBean</code></h4><p>确保没有自定义 <code>Bean</code> 时，才进行自动装配：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Bean</span><br><span class=\"line\">@ConditionalOnMissingBean</span><br><span class=\"line\">public DataSource dataSource() &#123;</span><br><span class=\"line\">    return new HikariDataSource();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果自己定义了 <code>DataSource</code>，这个 <code>Bean</code><strong>不会被创建</strong>。</p>\n<h4 id=\"（3）-ConditionalOnProperty\"><a href=\"#（3）-ConditionalOnProperty\" class=\"headerlink\" title=\"（3）@ConditionalOnProperty\"></a><strong>（3）</strong><code>@ConditionalOnProperty</code></h4><p>检查配置文件是否开启某个功能：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@ConditionalOnProperty(name = &quot;spring.datasource.enabled&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span><br><span class=\"line\">@Configuration</span><br><span class=\"line\">public class DataSourceAutoConfiguration &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果 <code>spring.datasource.enabled=true</code>，则启用自动配置。</p>\n<p>通过一系列判断，SpringBoot能够自动选择到底要注册哪些类。</p>\n<h3 id=\"如何知道哪些类能配置\"><a href=\"#如何知道哪些类能配置\" class=\"headerlink\" title=\"如何知道哪些类能配置\"></a>如何知道哪些类能配置</h3><p>我们知道SpringBoot会从<code>META-INF/spring/%s.imports</code>文件中自动配置类，而这个文件中类的名称都是<code>xxxxAutoConfiguration</code>，比如常见的<code>SessionAutoConfiguration</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoConfiguration(</span></span><br><span class=\"line\"><span class=\"meta\">    after = &#123;DataSourceAutoConfiguration.class, HazelcastAutoConfiguration.class, JdbcTemplateAutoConfiguration.class, MongoDataAutoConfiguration.class, MongoReactiveDataAutoConfiguration.class, RedisAutoConfiguration.class, RedisReactiveAutoConfiguration.class, WebSessionIdResolverAutoConfiguration.class&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">    before = &#123;HttpHandlerAutoConfiguration.class, WebFluxAutoConfiguration.class&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123;Session.class&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(&#123;ServerProperties.class, SessionProperties.class, WebFluxProperties.class&#125;)</span></span><br></pre></td></tr></table></figure>\n\n<p>在<code>@EnableConfigurationProperties()</code>注解中的类就是我们能在配置文件中配置的类，比如<code>ServerProperties.class</code>，发现<code>@ConfigurationProperties</code>配置的就是我们在配置文件中写的<code>server.xxxx</code>，这个类的属性就是我们能配置的值，比如<code>port</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(&quot;server&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServerProperties</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer port;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> InetAddress address;</span><br><span class=\"line\">    <span class=\"meta\">@NestedConfigurationProperty</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">ErrorProperties</span> <span class=\"variable\">error</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ErrorProperties</span>();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ForwardHeadersStrategy forwardHeadersStrategy;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String serverHeader;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">DataSize</span> <span class=\"variable\">maxHttpRequestHeaderSize</span> <span class=\"operator\">=</span> DataSize.ofKilobytes(<span class=\"number\">8L</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Shutdown shutdown;</span><br><span class=\"line\">    <span class=\"meta\">@NestedConfigurationProperty</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Ssl ssl;</span><br><span class=\"line\">    <span class=\"meta\">@NestedConfigurationProperty</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Compression compression;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MimeMappings mimeMappings;</span><br><span class=\"line\">    <span class=\"meta\">@NestedConfigurationProperty</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Http2 http2;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Servlet servlet;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Reactive reactive;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Tomcat tomcat;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Jetty jetty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Netty netty;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Undertow undertow;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以我们能发现，哪些类我们能配置其实可以从<code>META-INF/spring/%s.imports</code>文件下各种<code>AutoConfiguration</code>类中找到，我们就不需要去死记硬背了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上，我简单介绍了SpringBoot自动装配原理，以及自动配置流程，希望对你有所帮助。</p>\n","text":"引入SpringBoot进一步简化了web应用开发步骤，其中一个很重要的核心概念就是自动装配，什么是自动装配？自动装配都做了些什么？ 自动装配概述以往我们使用S...","permalink":"/post/SpringBoot自动装配原理","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[{"name":"笔记","slug":"笔记","count":10,"path":"api/categories/笔记.json"}],"tags":[{"name":"笔记","slug":"笔记","count":6,"path":"api/tags/笔记.json"},{"name":"SpringBoot","slug":"SpringBoot","count":2,"path":"api/tags/SpringBoot.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">引入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">自动装配概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A0%B8%E5%BF%83%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">自动装配核心理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SpringBootApplication\"><span class=\"toc-text\">@SpringBootApplication</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SpringBootConfiguration\"><span class=\"toc-text\">@SpringBootConfiguration</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#EnableAutoConfiguration\"><span class=\"toc-text\">@EnableAutoConfiguration</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#AutoConfigurationPackage\"><span class=\"toc-text\">@AutoConfigurationPackage</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Import-AutoConfigurationPackages-Registrar-class\"><span class=\"toc-text\">@Import({AutoConfigurationPackages.Registrar.class})</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Import-AutoConfigurationImportSelector-class\"><span class=\"toc-text\">@Import({AutoConfigurationImportSelector.class})</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">思维导图表示</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">自动配置流程理解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Conditional-%E6%9D%A1%E4%BB%B6%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">@Conditional 条件匹配</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%881%EF%BC%89-ConditionalOnClass\"><span class=\"toc-text\">（1）@ConditionalOnClass</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%882%EF%BC%89-ConditionalOnMissingBean\"><span class=\"toc-text\">（2）@ConditionalOnMissingBean</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%EF%BC%883%EF%BC%89-ConditionalOnProperty\"><span class=\"toc-text\">（3）@ConditionalOnProperty</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E5%93%AA%E4%BA%9B%E7%B1%BB%E8%83%BD%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">如何知道哪些类能配置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"Mesonsaber","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"励志做一个好程序员","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/336414738?spm_id_from=333.1007.0.0"},"github":{"icon":"/svg/github.svg","link":"https://github.com/buhuishiwo"},"music":{"icon":"/svg/CN_NetEase music.svg","link":"https://music.163.com/#/user/home?id=466698853"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"基于 Maven 的 Lombok 基本使用","uid":"b3e2f99cc30fff3cb39b2aeb3491e62b","slug":"基于-Maven-的-Lombok-基本使用","date":"2025-04-15T14:14:46.000Z","updated":"2025-04-15T14:16:54.162Z","comments":true,"path":"api/articles/基于-Maven-的-Lombok-基本使用.json","keywords":null,"cover":"/img/changli.png","text":"lombok介绍Lombok 是一个 Java 库，通过注解的方式自动生成常见的样板代码（如 getter、setter、构造函数、toString、equal...","permalink":"/post/基于-Maven-的-Lombok-基本使用","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"笔记","slug":"笔记","count":10,"path":"api/categories/笔记.json"}],"tags":[{"name":"笔记","slug":"笔记","count":6,"path":"api/tags/笔记.json"},{"name":"SpringBoot","slug":"SpringBoot","count":2,"path":"api/tags/SpringBoot.json"},{"name":"Maven","slug":"Maven","count":1,"path":"api/tags/Maven.json"}],"author":{"name":"Mesonsaber","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"励志做一个好程序员","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/336414738?spm_id_from=333.1007.0.0"},"github":{"icon":"/svg/github.svg","link":"https://github.com/buhuishiwo"},"music":{"icon":"/svg/CN_NetEase music.svg","link":"https://music.163.com/#/user/home?id=466698853"}}}}},"next_post":{"title":"MVC架构","uid":"fbbfb14bbd36bacdc14feb17917b934a","slug":"MVC架构","date":"2025-04-03T13:47:22.000Z","updated":"2025-04-03T13:51:03.757Z","comments":true,"path":"api/articles/MVC架构.json","keywords":null,"cover":"/img/newBlog_cover.png","text":"MVC架构我们在开发Javaweb应用时，往往需要使用Servlet来实现业务逻辑，一般情况下，我们会将一个业务的实现逻辑写在一个Servlet类中，它可能会包...","permalink":"/post/MVC架构","photos":[],"count_time":{"symbolsCount":701,"symbolsTime":"1 mins."},"categories":[{"name":"笔记","slug":"笔记","count":10,"path":"api/categories/笔记.json"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","count":3,"path":"api/tags/JavaWeb.json"},{"name":"笔记","slug":"笔记","count":6,"path":"api/tags/笔记.json"}],"author":{"name":"Mesonsaber","slug":"blog-author","avatar":"/img/logo.png","link":"/","description":"励志做一个好程序员","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/336414738?spm_id_from=333.1007.0.0"},"github":{"icon":"/svg/github.svg","link":"https://github.com/buhuishiwo"},"music":{"icon":"/svg/CN_NetEase music.svg","link":"https://music.163.com/#/user/home?id=466698853"}}}}}}